/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JFrame;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.TargetDataLine;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 * @author WE
 */
public class Front extends javax.swing.JFrame {
    private DatagramSocket ds;
    private boolean stopaudioCapture = false;
    private ByteArrayOutputStream byteOutputStream;
    private AudioFormat adFormat;
    private TargetDataLine targetDataLine; //hardware (Microphone)
    private AudioInputStream InputStream;
    private SourceDataLine sourceLine; //hardware (Speaker)
    private int serverport = 900;

    /**
     * Creates new form Front
     */
    public Front() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        btnConnect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        btnRec = new javax.swing.JButton();
        editIPDestinantion = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnPlayback = new javax.swing.JButton();
        editIPhost = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        editPorthost = new javax.swing.JTextField();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        btnRec.setText("Speak");
        btnRec.setEnabled(false);
        btnRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecActionPerformed(evt);
            }
        });

        editIPDestinantion.setToolTipText("destination IP");
        editIPDestinantion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editIPDestinantionActionPerformed(evt);
            }
        });

        jLabel1.setText("IP");

        btnPlayback.setText("Playback");
        btnPlayback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaybackActionPerformed(evt);
            }
        });

        editIPhost.setToolTipText("IP Host");

        jLabel2.setText("IP Host");

        editPorthost.setToolTipText("Port Host");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editIPhost, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editPorthost, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnConnect)
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editIPDestinantion, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(152, 152, 152)
                        .addComponent(btnRec)
                        .addGap(18, 18, 18)
                        .addComponent(btnPlayback, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConnect)
                    .addComponent(editIPhost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(editPorthost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRec)
                    .addComponent(editIPDestinantion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnPlayback))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        // TODO add your handling code here:
        try {
            if(btnConnect.getText().equalsIgnoreCase("Connect")){
                
                //connect to datagram socket, default InetAddress is localhost
                ds = new DatagramSocket(Integer.valueOf(editPorthost.getText()), InetAddress.getByName(editIPhost.getText()));
                //run the listener from server, 
                ClientThread clientThread = new ClientThread(ds, InputStream, sourceLine, this);
                clientThread.start();
                
                btnConnect.setText("Connected");
                btnRec.setEnabled(true);
                btnConnect.setEnabled(false);
            }
        } catch (SocketException ex) {
            Logger.getLogger(Front.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Your IP isn't Valid or already in use", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(Front.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecActionPerformed
        // TODO add your handling code here:
        if(btnRec.getText().equalsIgnoreCase("Speak")){
            //if button speak click, start capturing audio
            captureAudio();
            btnRec.setText("Stop");
        }else{
            stopaudioCapture = true;
            btnRec.setText("Speak");
            //after finish speaking, close the data line listener
            targetDataLine.close();
        }
    }//GEN-LAST:event_btnRecActionPerformed

    private void editIPDestinantionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editIPDestinantionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editIPDestinantionActionPerformed

    private void btnPlaybackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaybackActionPerformed
        // TODO add your handling code here:
        if(byteOutputStream!=null){
            playAudio();
        }
    }//GEN-LAST:event_btnPlaybackActionPerformed

    private void captureAudio() {
        try {
            adFormat = getAudioFormat();
            DataLine.Info dataLineInfo = new DataLine.Info(TargetDataLine.class, adFormat);
            
            //Get System microphone
            targetDataLine = (TargetDataLine) AudioSystem.getLine(dataLineInfo);
            targetDataLine.open(adFormat);
            //Start listening input from microphone
            targetDataLine.start();
            
            //capturing buffer, sending packet, convert buffer into a file
            Thread captureThread = new Thread(new CaptureThread());
            captureThread.start();
        } catch (LineUnavailableException e) {
            StackTraceElement stackEle[] = e.getStackTrace();
            for (StackTraceElement val : stackEle) {
                System.out.println(val);
            }
            targetDataLine.close();
        }
    }
    private void playAudio() {
        try {
            //take audio buffer to an array of bytes
            byte audioData[] = byteOutputStream.toByteArray();
            InputStream byteInputStream = new ByteArrayInputStream(audioData);
            AudioFormat format = getAudioFormat();
            InputStream = new AudioInputStream(byteInputStream, format, audioData.length / format.getFrameSize());
            //get dataline or hardware (speaker) information
            DataLine.Info dataLineInfo = new DataLine.Info(SourceDataLine.class, format);
            //Library: Source Data Line
            sourceLine = (SourceDataLine) AudioSystem.getLine(dataLineInfo);
            sourceLine.open(format);
            //start listening for an output
            sourceLine.start();
            //play audio using thread
            Thread playThread = new Thread(new PlayThread());
            playThread.start();
        } catch (LineUnavailableException e) {
            System.out.println(e);
            sourceLine.close();
        }
    }
    private AudioFormat getAudioFormat() {
        //Audio format configuration
        float sampleRate = 16000.0F;
        int sampleInbits = 16;
        int channels = 1;
        boolean signed = true;
        boolean bigEndian = false;
        return new AudioFormat(sampleRate, sampleInbits, channels, signed, bigEndian);
    }
    
    public JTextArea getTxtArea(){
        return textArea;
    }
    
    class CaptureThread extends Thread {
        //save the buffer from targetdataline or buffer container
        byte tempBuffer[] = new byte[10000];

        @Override
        public void run() {

            byteOutputStream = new ByteArrayOutputStream();
            stopaudioCapture = false;
            try {
                InetAddress IPAddress = InetAddress.getByName(editIPDestinantion.getText());
                while (!stopaudioCapture) {
                    int cnt = targetDataLine.read(tempBuffer, 0, tempBuffer.length);
                    if (cnt > 0) {
                        
                        //send the packet using datagram to a certain ip address and server port
                        DatagramPacket sendPacket = new DatagramPacket(tempBuffer, tempBuffer.length, IPAddress, serverport);
                        ds.send(sendPacket);
                        byteOutputStream.write(tempBuffer, 0, cnt);
                    }
                }
                byteOutputStream.close();
                
                /*===================================================
                After recording stopped, convert audio buffer into a file
                */
                SimpleDateFormat dateformat = new SimpleDateFormat("dd MMMM yyyy");
                SimpleDateFormat timeformat = new SimpleDateFormat("hh mm ss a");
                
                String time = timeformat.format(new Date());
                //setup file name and extension
                File file = new File("vn-" + time + ".wav");
                //Audio buffer taken from byteoutputstream in form of byte array
                byte audioData[] = byteOutputStream.toByteArray();
                InputStream byteInputStream = new ByteArrayInputStream(audioData);
                AudioFormat format = getAudioFormat();
                AudioInputStream is = new AudioInputStream(byteInputStream, format, audioData.length / format.getFrameSize());
                try {
                    //create the file
                    AudioSystem.write(is, AudioFileFormat.Type.WAVE, file);
                } catch (IOException ex) {
                    Logger.getLogger(Front.class.getName()).log(Level.SEVERE, null, ex);
                }
                //=====================================================
                
            } catch (IOException e) {
                System.out.println("CaptureThread::run()" + e);
            }
        }
    }
    class PlayThread implements Runnable{
        //buffer container
        byte tempBuffer[] = new byte[10000];

        @Override
        public void run() {
            try {
                int cnt;
                //read buffer from audio inputstream
                while ((cnt = InputStream.read(tempBuffer, 0, tempBuffer.length)) != -1) {
                    if (cnt > 0) {
                       //play the audio buffer using speaker
                       sourceLine.write(tempBuffer, 0, cnt);
                    }
                }
            } catch (IOException e) {
                System.out.println(e);
                System.exit(0);
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Front.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Front().setVisible(true);
        });
    }

    public JTextArea getTextArea() {
        return textArea;
    }




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnPlayback;
    private javax.swing.JButton btnRec;
    private javax.swing.JTextField editIPDestinantion;
    private javax.swing.JTextField editIPhost;
    private javax.swing.JTextField editPorthost;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
